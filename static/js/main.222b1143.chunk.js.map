{"version":3,"sources":["components/Upload.js","components/common/File.js","App.js","serviceWorker.js","index.js"],"names":["Upload","onDrop","files","_this2","this","react_default","a","createElement","Col","xs","sm","span","offset","className","Row","es","_ref","getRootProps","getInputProps","Object","assign","ref","c","upload","Button","variant","onClick","click","File_File","Component","File","App","Container","Upload_Upload","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.222b1143.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Col,\n    Row,\n    Button\n} from 'react-bootstrap';\nimport Dropzone from 'react-dropzone';\nimport { File } from '../components';\n\nexport default class Upload extends Component {\n    onDrop = (files) => {\n        \n    }\n\n    render() {\n        return(\n            <Col xs={12} sm={{span: 6, offset: 3}} className=\"parent\">\n                <h3 className=\"text-center\">File Upload</h3>\n                <hr />\n                <Row>\n                    <Col xs={12} sm={5}>\n                        <Row>\n                            <Col xs={12} className=\"form-group\">\n                                <Dropzone onDrop={this.onDrop}>\n                                    {({getRootProps, getInputProps}) => (\n                                        <div {...getRootProps()}>\n                                        <input {...getInputProps()} ref={c=>this.upload=c} />\n                                            <div className=\"title text-center\">\n                                                <p><i className=\"fas fa-upload\"></i></p>\n                                                <p>Drag file to upload</p>\n                                            </div>\n                                        </div>\n                                    )}\n                                </Dropzone>\n                            </Col>\n                            <Col xs={12} className=\"text-center\">\n                                <Button variant=\"success\" onClick={() => this.upload.click()}>Choose File</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xs={12} sm={7}>\n                        <Row>\n                            <Col xs={12}>\n                                <b>Uploading</b>\n                            </Col>\n                            <Col xs={12} className=\"file-container\">\n                                <File />\n                                <File />\n                                <File />\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Col>\n        )\n    }\n}","import React, { Component } from 'react';\nimport {\n    Col,\n    Row\n} from 'react-bootstrap';\n\nexport default class File extends Component {\n    render() {\n        return(\n            <Row>\n                <Col xs={12}>\n                    <Row>\n                        <Col xs={2}><i className=\"far fa-image\"></i></Col>\n                        <Col xs={10}>\n                            <Row>\n                                <Col xs={12} className=\"details\">\n                                    <span>Photo.png</span>\n                                    <span className=\"size\">7.5mb</span>\n                                    <i className=\"fas fa-times pull-right\"></i>\n                                </Col>\n                                <Col xs={12}>\n                                    <Row>\n                                        <Col xs={7} className=\"loader padding-left progressbar\"><hr /></Col>\n                                        <Col xs={5} className=\"loader padding-right\"><hr /></Col>\n                                    </Row>\n                                </Col>\n                                <Col xs={12} className=\"details\">\n                                    <span>37% done</span>\n                                    <span className=\"pull-right\">90KB/sec</span>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col xs={12}>\n                            <hr />\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Upload } from './components';\nimport {\n  Container\n} from 'react-bootstrap';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <Upload />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}